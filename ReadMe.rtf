{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;
\red63\green110\blue116;\red0\green116\blue0;\red28\green0\blue207;\red196\green26\blue22;\red46\green13\blue110;
\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c14900\c27800\c29400;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This is a Board Game Engine. Examples of 2 player and 4 player chess are provided, along with other random board games. The board can be of any size, and can have missing cells. There can be any number of players.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
To use:\
Creating the board and the players is straightforward. Use a PieceCreator to make your pieces.  Every piece has a closure called IsLegalMove that will take a translation and return if it is legal, along with conditions that must be met. For example, translation(1,1) MustBeOccupiedByOpponent. Conditions are individual structs that conform to a Condition protocol. They have one function, to check whether or not a condition is met. The GameVC will check with the Game data model which will check if the conditions are met to make a move. The GameVC will then make the move in the model and the view accordingly. If there is a completion, it will complete it, then go to the next turn.\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Basic Types/Objects:\ulnone \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 class\cf3  GameVC \{...\}
\f0\fs24 \cf0 \CocoaLigature1 \

\f1\fs22 \cf2 \CocoaLigature0 class\cf3  Game \{...\}
\f0\fs24 \cf0 \CocoaLigature1 \

\f1\fs22 \cf2 \CocoaLigature0 struct\cf3  Board \{...\}\
\cf2 class\cf3  BoardView: \cf4 UIView\cf3  \{...\}\
\cf2 class\cf3  Player \{...\}\
\cf2 class\cf3  Piece: \cf4 NSObject\cf3 , \cf4 NSCopying\cf3  \{...\}\
\cf2 class\cf3  PieceView: \cf4 UIImageView\cf3  \{...\}\
\cf2 class\cf3  PieceCreator: \cf5 PiecesCreator\cf3  \{...\}\
\

\f0\fs24 \cf0 \CocoaLigature1 \

\f1\fs22 \cf2 \CocoaLigature0 typealias\cf3  IsLegalMove = (\cf2 _\cf3  : \cf5 Translation\cf3 ) -> (isLegal: \cf4 Bool\cf3 , legalIf: [\cf5 LegalIf\cf3 ]?)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 struct\cf3  LegalIf \{\
    \cf2 let\cf3  condition: \cf5 Condition\cf3 \
    \cf2 let\cf3  translations: [\cf5 Translation\cf3 ]?\
\}\
\
\cf2 protocol\cf3  Condition \{\
    \cf2 func\cf3  checkIfConditionIsMet(piece: \cf5 Piece\cf3 , translations: [\cf5 Translation\cf3 ]?, game: \cf5 Game\cf3 ) -> \cf5 IsMetAndCompletions\cf3 \
\}\
\
\cf2 struct\cf3  IsMetAndCompletions \{\
    \cf2 let\cf3  isMet: \cf4 Bool\cf3 \
    \cf2 let\cf3  completions: [\cf5 Completion\cf3 ]?\
\}\
\
\
\cf2 struct\cf3  Completion \{\
    \cf2 let\cf3  closure: (() -> \cf4 Void\cf3 )\
    \cf2 let\cf3  evenIfNotMet: \cf4 Bool\cf3 \
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 typealias\cf3  IsLegalMove = (\cf2 _\cf3  : \cf5 Translation\cf3 ) -> (isLegal: \cf4 Bool\cf3 , legalIf: [\cf5 LegalIf\cf3 ]?)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Example of Initializing:\ulnone \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf3 \CocoaLigature0             \cf6 // create the board\
\cf3             \cf2 let\cf3  board = \cf5 Board\cf3 (numRows: \cf7 8\cf3 , numColumns: \cf7 8\cf3 , skipCells: \cf2 nil\cf3 )\
            \
            \cf6 // create the boardView\
\cf3             \cf2 let\cf3  image1 = \cf4 UIImage\cf3 (named: \cf8 "galaxy1"\cf3 )\
            \cf2 let\cf3  image2 = \cf4 UIImage\cf3 (named: \cf8 "galaxy2"\cf3 )\
            \cf2 let\cf3  images = (image1 != \cf2 nil\cf3  \cf9 &&\cf3  image2 != \cf2 nil\cf3 ) ? [image1!, image2!] : \cf2 nil\cf3 \
            \cf2 let\cf3  boardView = \cf5 BoardView\cf3 (board: board, checkered: \cf2 true\cf3 , images: images, backgroundColors: [\cf4 UIColor\cf3 .\cf4 red\cf3 , \cf4 UIColor\cf3 .\cf4 black\cf3 ])\
            \
            \cf6 // create the players with pieces\
\cf3             \cf2 let\cf3  players = [\cf5 Player\cf3 (name: \cf8 "Green"\cf3 , id: \cf7 0\cf3 , forwardDirection: .\cf10 right\cf3 , pieces: \cf5 PieceCreator\cf3 .\cf5 shared\cf3 .\cf10 makePieces\cf3 (variation: gameVariation, playerId: \cf7 0\cf3 , board: board)), \cf5 Player\cf3 (name: \cf8 "Orange"\cf3 , id: \cf7 1\cf3 , forwardDirection: .\cf10 left\cf3 , pieces: \cf5 PieceCreator\cf3 .\cf5 shared\cf3 .\cf10 makePieces\cf3 (variation: gameVariation, playerId: \cf7 1\cf3 , board: board))]\
\
------------------------\
\cf6 // Piece initialization\cf3 \
\cf5 Piece\cf3 (name: \cf8 "Square"\cf3 , position: \cf5 Position\cf3 (row: row, column: column), isPossibleTranslation: isPossibleTranslation, isLegalMove: isLegalMove)\
\cf6 // isPossibleTranslation example\cf3 \
\cf2 let\cf3  isPossibleTranslation = \{(translation: \cf5 Translation\cf3 ) -> \cf4 Bool\cf3  \cf2 in\cf3 \
                \cf2 if\cf3  translation.\cf5 row\cf3  == \cf7 0\cf3  \cf9 &&\cf3  translation.\cf5 column\cf3  == \cf7 0\cf3  \{\
                    \cf2 return\cf3  \cf2 false\cf3 \
                \} \cf2 else\cf3  \{    \cf6 // move or jump one vertically or horizontally\
\cf3                     \cf2 return\cf3  (translation.\cf5 row\cf3  == \cf7 0\cf3  \cf9 &&\cf3  (\cf9 abs\cf3 (translation.\cf5 column\cf3 ) == \cf7 1\cf3  \cf9 ||\cf3  \cf9 abs\cf3 (translation.\cf5 column\cf3 ) == \cf7 2\cf3 )) \cf9 ||\cf3  (translation.\cf5 column\cf3  == \cf7 0\cf3  \cf9 &&\cf3  (\cf9 abs\cf3 (translation.\cf5 row\cf3 ) == \cf7 1\cf3  \cf9 ||\cf3  \cf9 abs\cf3 (translation.\cf5 row\cf3 ) == \cf7 2\cf3 ))\
                \}\
            \}\
\cf6 // isLegalMove example\cf3 \
\cf2 let\cf3  isLegalMove = \{(translation : \cf5 Translation\cf3 ) -> (isLegal: \cf4 Bool\cf3 , legalIf: [\cf5 LegalIf\cf3 ]?) \cf2 in\
				let \cf3 isLegal = translation.row > 0	\cf6 // legal if moving forward\cf3 \
                \cf2 var\cf3  conditions: [\cf5 LegalIf\cf3 ]? = [\cf5 LegalIf\cf3 (condition: \cf5 MustBeVacantCell\cf3 (), translations: [\cf5 translation\cf3 ])]			\cf6 // if condition is met that it is vacant\cf2 \
\cf3                 \cf2 return\cf3  (isLegal, conditions)\
\
            \}\
\
\

\f0\fs24 \cf0 \CocoaLigature1 \
}